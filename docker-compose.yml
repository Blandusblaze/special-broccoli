version: "3.8"

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: workout_zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: workout_kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - kafka-net

  topic-init:
    image: wurstmeister/kafka:latest
    container_name: topic_creator
    depends_on:
      - kafka

    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      sleep 10 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic raw.input.events --partitions 3 --replication-factor 1 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic data.cleaned --partitions 3 --replication-factor 1 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic pipeline.status.updated --partitions 2 --replication-factor 1 &&
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:9092 --topic errors.fatal --partitions 1 --replication-factor 1
      "
    networks:
      - kafka-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
networks:
  kafka-net:
    driver: bridge
